

strings_not_equal: 0000000000401338
Given the input: rdi & rsi, which are pointers to my input string and password string, 
respectively, tests whether the input string is identical to the password.
The result of comparison looks to be stored in eax.

rbx, rbp: pointer to my input string and password string, respectively

逻辑应该是这样的：
i = 0;
while(i < len){
  if(input[i] != password[i]){
    return;
  }

  i++;
}


if(len(my_string) != len(password)):{
  eax = edx
  pop, pop, pop
  return
}
  



phase_1: 0000000000400ee0
  rsp = rsp - 8;
  esi = 0x402400;
  strings_not_equal();
  if(eax == 0){
    rsp += 8;
    return;
  }
  else{
    explode_bomb();
    rsp += 8;
    return;
  }



phase_2: 0000000000400efc
Given the input $rax, which stores a pointer to my input string. 
Determin whether the inpupt matches with password.

read_six_numbers: 000000000040145c
Input:
rax: pointer to my input string, = 0x6037d0(initial), # numbers read(end)
rsi: 0x7fffffffdba0，一定代表某种含义
rsp: 0x7fffffffdb98，一定代表某种含义(初始值)，0x7fffffffdb98，一定代表某种含义（末端值）

Output: rsp = input[0], rsp+4 = input[1]...



string_length: 000000000040131b

Given the input pointer stored at rdi, compute the length of the string. 
Store length of input string to rax & rcx register.

if(*rdi == '\0'):
  eax = 0
  return

rdx = rdi
rdx++
eax = edx
eax = eax - edi
if(rdx != 0):
  go to rdx++
else:
  eax = 0
  return


52:
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa







Workflow:
gdb bomb
b explode_bomb
b phase_1

r

GDB reference:
printf "%c\n", $eax
打印寄存器的值（Hex）：p/x $rdx
打印字符串： x/s 0xbffff890
打印字符：x/c $rsp
删除所有断点：delete breakpoints
打印存储的数值：x/g $rax
查看断点：info breakpoints
al是ax的lower 8 bits
ax是eax的lower 16 bits
eax是rax的lower 32 bits
disass # Display some assembly code next
stepi # next assembly instruction
info registers # print all registers
p $reg_name # print one register, e.g., p $rdi
显示现在的指令：x/i $pc
print /t $rax Print contents of %rax in binary
